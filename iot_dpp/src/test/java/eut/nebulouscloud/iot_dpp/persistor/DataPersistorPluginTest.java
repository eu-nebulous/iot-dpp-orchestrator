package eut.nebulouscloud.iot_dpp.persistor;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.activemq.artemis.core.config.Configuration;
import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;
import org.apache.activemq.artemis.core.security.CheckType;
import org.apache.activemq.artemis.core.security.Role;
import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;
import org.apache.activemq.artemis.spi.core.security.ActiveMQSecurityManager;
import org.eclipse.paho.client.mqttv3.IMqttClient;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Option;
import com.jayway.jsonpath.ParseContext;

import io.jsonwebtoken.lang.Arrays;


public class DataPersistorPluginTest {
	static Logger LOGGER = LoggerFactory.getLogger(DataPersistorPluginTest.class);
	
	private ParseContext jsonParser = JsonPath.using(com.jayway.jsonpath.Configuration.defaultConfiguration()
			.addOptions(Option.DEFAULT_PATH_LEAF_TO_NULL).addOptions(Option.ALWAYS_RETURN_LIST));
	/**
	 * Creates a local ActiveMQ server listening at localhost:61616. The server
	 * accepts requests from any user. Configures the MessageMonitoringPluging and
	 * sets it to store generated events in the provided events list
	 * 
	 * @param events A list that will contain all the events generated by the
	 *               MessageMonitoringPluging
	 * @return the created MessageMonitoringPluging instance.
	 * @throws Exception
	 */
	private EmbeddedActiveMQ createActiveMQBroker(int port, DataPersistorPlugin dataPersistorPlugin) throws Exception {
		Configuration config = new ConfigurationImpl();
		String foldersRoot = "data/" + new Date().getTime() + "/data_" + port;
		config.setBindingsDirectory(foldersRoot + "/bindings");
		config.setJournalDirectory(foldersRoot + "/journal");
		config.setJournalRetentionDirectory(foldersRoot + "/journalRetention");
		config.setLargeMessagesDirectory(foldersRoot + "/lm");
		config.setNodeManagerLockDirectory(foldersRoot + "/nodeManagerLock");
		config.setPagingDirectory(foldersRoot + "/paging");
		config.addAcceptorConfiguration("netty", "tcp://localhost:" + port);
		config.getBrokerMessagePlugins().add(dataPersistorPlugin);

		EmbeddedActiveMQ server = new EmbeddedActiveMQ();
		server.setSecurityManager(new ActiveMQSecurityManager() {
			@Override
			public boolean validateUserAndRole(String user, String password, Set<Role> roles, CheckType checkType) {
				return true;
			}

			@Override
			public boolean validateUser(String user, String password) {
				return true;
			}
		});
		server.setConfiguration(config);
		server.start();
		while (!server.getActiveMQServer().isActive()) {
			System.out.println("Waiting for server to start...");
			Thread.sleep(500);
		}
		return server;
	}
	
	

	@Test
	public void test() throws Exception {
		/*
		 * docker run \ -p 8086:8086 \ -v "$PWD/data:/var/lib/influxdb2" \ -v "$PWD/config:/etc/influxdb2" \ influxdb:2
		 * 
		 * lK-oWPGUJ25629q5VIFJiX_Y_sZdn3IAeF2YXyLS2siiBMQRTOunkhPOOl55brbO-
		 * CaIOFWVSzqfd1RJxQkWgA== admin adminadmin
		 */

		DataPersistorPlugin dataPersistorPlugin = new DataPersistorPlugin();
		Map<String, String> config = new HashMap<String, String>();
		config.put("influxDB.host", "http://localhost:8086");
		config.put("influxDB.organization", "aaaa");
		config.put("influxDB.token",
				"V6GrKrjnVXC9QZbiyp8KhoSs7z_QLl0uUpxoGUGKOjN0wqAUsv5VZTlgMd4Hv3toCfJ9dM1DTiEG0b0EmZBgjQ==");
		dataPersistorPlugin.init(config);
		
		{
			MessageDataExtractorDefinition extractor = new MessageDataExtractorDefinition();
			extractor.filterExpression=".*\\.vehicles\\..*\\.location$|$|AND";
			extractor.bucketExpression="vehicle_locations";
			//extractor.dateTimeExpression="BODY|$.date|TIMESTAMP";
			extractor.measurementExpression="locationv2";
			extractor.fieldExpressions = List.of("BODY|$|latitude|$.lat","BODY|$|longitude|$.lon");
			extractor.tagExpressions = List.of("BODY|$|latitude|$.lat","BODY|$|longitude|$.lon");
			extractor.tagExpressions = List.of("ADDRESS|.*\\.vehicles\\.(.*)\\.location$|vid:$1");
			dataPersistorPlugin.dataExtractors.add(new MessageDataExtractor(extractor));
		}
		{
			MessageDataExtractorDefinition extractor = new MessageDataExtractorDefinition();
			extractor.filterExpression=".*\\.vehicles\\..*\\.location$|$|AND";
			extractor.bucketExpression="vehicle_locations";
			extractor.dateTimeExpression="BODY|$.date|TIMESTAMP";
			extractor.measurementExpression="locationv2";
			extractor.fieldExpressions = List.of("BODY|$|latitude|$.lat","BODY|$|longitude|$.lon");
			//extractor.tagExpressions = List.of("ADDRESS|.*\\.vehicles\\.(.*)\\.location$|$1");
			dataPersistorPlugin.dataExtractors.add(new MessageDataExtractor(extractor));
			}
		EmbeddedActiveMQ broker = createActiveMQBroker(61616, dataPersistorPlugin);
		ObjectMapper om = new ObjectMapper();
		IMqttClient publisher = new MqttClient("tcp://localhost:61616", "publisher");
		publisher.connect();

		while (true) {
			Map<String,Object> record = new HashMap<String, Object>();
			record.put("lat", 10.0);
			record.put("lon", 2.0);
			MqttMessage message = new MqttMessage(om.writeValueAsString(record).getBytes());
			message.setQos(2);
			publisher.publish("data.vehicles.LX23.location", message);
			Thread.sleep(2000);
			LOGGER.info("Publish");
		}

	}

}
